"
SUnit tests for large positive integers
"
Class {
	#name : #LargePositiveIntegerTest,
	#superclass : #ClassTestCase,
	#category : #'Kernel-Tests-Numbers'
}

{ #category : #tests }
LargePositiveIntegerTest >> testBitShift [

	"Check bitShift from and back to SmallInts"
	
	1 to: 257 do: [:i | self should: [((i bitShift: i) bitShift: 0-i) == i]].
]

{ #category : #tests }
LargePositiveIntegerTest >> testEmptyTemplate [

	"Check that an uninitialized instance behaves reasonably."

	| i |
	i := LargePositiveInteger new: 4.
	self assert: i size = 4.
	self assert: i printString = '0'.
	self assert: i normalize = 0
]

{ #category : #tests }
LargePositiveIntegerTest >> testNormalize [
	"Check normalization and conversion to/from SmallInts"

	self assert: ((SmallInteger maxVal + 1 - 1) == SmallInteger maxVal).
	self assert: (SmallInteger maxVal + 3 - 6) == (SmallInteger maxVal-3).
	self should: ((SmallInteger minVal - 1 + 1) == SmallInteger minVal).
	self assert: (SmallInteger minVal - 3 + 6) == (SmallInteger minVal+3).
]

{ #category : #'tests-printing' }
LargePositiveIntegerTest >> testStoreOn [
	| integer |
	integer := SmallInteger maxVal + 1.
	self
		assert: integer class equals: LargePositiveInteger;
		assert: (String streamContents: [ :s | integer storeOn: s ]) equals: integer asString
]
